<!doctype html>
<html lang="en-US">
    <head>
        <meta charset="utf-8">
        <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
        <title>OSPAN - Demo</title>
        <meta name="description" content="">
        <meta name="viewport" content="width=device-width, initial-scale=1">

        <link rel="stylesheet" href="static/css/materialize.min.css">
        <link rel="stylesheet" href="static/css/main.css">
        <link href="static/css/shCore.css" rel="stylesheet" type="text/css" />
        <link href="static/css/shThemeDefault.css" rel="stylesheet" type="text/css" />
        <style>
            p {
                font-size: 18px;
            }
        </style>

    </head>
    <body class="cyan grey-text text-darken-3">
        <div id="content" style="max-width:80%;margin:0 auto;">
            <div id="login-page" class="row">
                <div class="col s12 z-depth-4 card-panel">
                    <div class="section-0" style="visibility: hidden;">
                        <h4>Variable Types</h4> 
                        <p>A variable provides us with named storage that our programs can manipulate. Each variable in Java has a specific type, which determines the size and layout of the variable's memory; the range of values that can be stored within that memory; and the set of operations that can be applied to the variable.</p>
                    </div>
                    <div class="section-1" style="visibility: hidden;">
                        <h4>Local Variables </h4>
                        <p>Local variables are created when the method, constructor or block is entered and the variable will be destroyed once it exits the method, constructor, or block.</p>
                    </div>
                    <div class="section-2" style="visibility: hidden;">
                        <p>Access modifiers cannot be used for local variables. They are visible only within the declared method, constructor, or block.</p>
                    </div>
                    <div class="section-3" style="visibility: hidden;">
                      
                        <p>There is no default value for local variables, so local variables should be declared and an initial value should be assigned before the first use.</p>
                    </div>
                    <div class="section-4" style="visibility: hidden;">
                      <h4>Class/Static Variables </h4>
                        <p>Class variables also known as static variables are declared with the static keyword in a class, but outside a method, constructor or a block. There would only be one copy of each class variable per class, regardless of how many objects are created from it..</p>
                    </div>
                    <div class="section-5" style="visibility: hidden;">
                        <p>Static variables are rarely used other than being declared as constants. Constants are variables that are declared as public/private, final, and static. Constant variables never change from their initial value.</p>
                    </div>
                    <div class="section-6" style="visibility: hidden;">
                        <p>Static variables are created when the program starts and destroyed when the program stops. They can be accessed by calling with the class nameClassName.VariableName.</p>
                    </div>
                    <div class="section-7" style="visibility: hidden;">
                        <p>Default values are same as instance variables. For numbers, the default value is 0; for Booleans, it is false; and for object references, it is null. Values can be assigned during the declaration or within the constructor. Additionally, values can be assigned in special static initializer blocks.</p>
                    </div>
                    <div class="button" style="visibility: hidden;">
                        <button  id="module-btn" class="btn-large waves-effect waves-pink pink lighten-1" style="margin:3em;float: right;">Take me to the Test</button>
                    </div>
                    <div>
                        <form id="module-form" action="/" method="post">
                            <input id="distractionCount" type="hidden" value="0" name="distractionCount">
                            <input id="exampleCount" type="hidden" value="0" name="exampleCount">
                            <input id="graspingCount" type="hidden" value="0" name="graspingCount">
                        </form>
                    </div>
                    <div id="modal1" class="modal">
                        <div class="modal-content">
                            <h4>You are inactive</h4>
                            <form action="#">
                                <p>
                                  <input class="with-gap" name="group1" value="0" type="radio" id="test1" />
                                  <label for="test1">I was distracted by noise/phone etc.</label>
                                </p>
                                <p class="grasping">
                                  <input class="with-gap" name="group1" value="1" type="radio" id="test2" />
                                  <label for="test2">I can't grasp the content, show me lesser content.</label>
                                </p>
                                <p>
                                  <input class="with-gap" name="group1" value="2" type="radio" id="test3"  />
                                  <label for="test3">Show me more examples</label>
                                </p>
                            </form>
                        </div>
                    </div>
                    <div id="modal2" class="modal">
                        <div class="modal-content">
                            <div class="example">
                                <h4>Example Static</h4>
                                <pre class="brush: java">
                                   import java.io.*;
public class Employee {

   // salary  variable is a private static variable
   private static double salary;

   // DEPARTMENT is a constant
   public static final String DEPARTMENT = "Development ";

   public static void main(String args[]) {
      salary = 1000;
      System.out.println(DEPARTMENT + "average salary:" + salary);
   }

                                </pre>
                                <p>
                            This will produce the following result â€“ <br><br>
                            <b> Development average salary:1000 </b>
                                </p>
                            </div>
                        </div>
                        <div class="modal-footer">
                          <a href="#!" class=" modal-action modal-close waves-effect waves-green btn-flat">Close</a>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <script src="static/js/vendor/jquery-1.11.2.min.js"></script>
        <script src="static/js/vendor/handlebars-v3.0.3.js"></script>
        <script src="static/js/vendor/materialize.min.js"></script>
        <script src="static/js/vendor/materialize.clockpicker.js"></script>
        <script type="text/javascript" src="static/js/shCore.js"></script>
        <script type="text/javascript" src="static/js/shBrushJava.js"></script>
        <script src="static/js/main.js"></script>
        <script>$(app.init);</script>
        <script type="text/javascript">
            var atOnce = parseInt({{.AtOnce}});
            var timeOut = parseInt({{.Timeout}});
            var total = 8;
            var currentCount = -1;
            var distractionCount = 0;
            var exampleCount = 0;
            var graspingCount = 0;

            function showNextStates(){
                currentCount = atOnce   + currentCount;
                for (var i=0; i <= currentCount; i++) {
                    $(".section-" + i).css("visibility", "visible");
                }
                if (currentCount == (total - 1)){
                    $("#module-btn").css("visibility", "visible");
                }
            }

            function hideLastTwoStates(){
                $(".section-" + (currentCount--)).css("visibility", "hidden");
                $(".section-" + (currentCount--)).css("visibility", "hidden");
                $("#module-btn").css("visibility", "hidden");
            }

            function showPopup(){
                console.log("Showing popup because no activity");
                $("body").off("click");
                $("#example").hide();
                $("input[name=group1]").prop("checked", false);
                if (currentCount <= 1) {
                    $(".grasping").hide();
                } else {
                    $(".grasping").show();
                }
                $("#modal1").modal("open");
            }
            var ticker;
            function setBodyEvent(){
                $("body").on("click", function(){
                    if(currentCount == (total - 1)){
                        return;
                    }
                    showNextStates();
                    clearTimeout(ticker);
                    ticker =  setTimeout(function() {
                        showPopup();
                    }, timeOut);
                });
                ticker =  setTimeout(function() {
                    showPopup();
                }, timeOut);
            }
            $(function(){
                showNextStates();
                $('#modal2').modal({
                     complete: function() { setBodyEvent(); }
                });
                $('#modal1').modal({dismissible: false});
                ticker =  setTimeout(function() {
                    showPopup();
                }, timeOut);
                $("body").on("click", function(){
                    showNextStates();
                    clearTimeout(ticker);
                    ticker =  setTimeout(function() {
                        showPopup();
                    }, timeOut);
                });
                $("#module-btn").on("click", function(){
                    $("#graspingCount").val(graspingCount);
                    $("#distractionCount").val(distractionCount);
                    $("#exampleCount").val(exampleCount);
                    $("#module-form").submit();
                });
                $("input[name='group1']").on("change", function(){
                    var checkedVal = $("input[name=group1]:checked").val();
                    //distracted
                    if (checkedVal == "0"){
                        distractionCount += 1;
                        $("#modal1").modal("close");
                        setBodyEvent();
                    } else if (checkedVal == "1"){
                        graspingCount += 1;
                        atOnce = 2;
                        hideLastTwoStates();
                        $("#modal1").modal("close");
                        setBodyEvent();
                    } else if (checkedVal == "2"){
                        //show example
                        exampleCount += 1;
                        $("#modal1").modal("close");
                        $("#modal2").modal("open");
                    }
                });
                SyntaxHighlighter.all();
            });
        </script>
    </body>
</html>
